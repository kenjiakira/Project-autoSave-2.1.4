const fs = require('fs');
const path = require('path');
const moment = require('moment');

const investmentOpportunitiesPath = path.join(__dirname, '../../module/commands/json/investmentOpportunities.json');
const userInvestmentsPath = path.join(__dirname, '../../module/commands/json/userInvestments.json');

const MAX_INVESTMENT_PER_TRANSACTION = 100000;

function readInvestmentOpportunities() {
  try {
    const rawData = fs.readFileSync(investmentOpportunitiesPath);
    return JSON.parse(rawData);
  } catch (error) {
    console.error(`L·ªói khi ƒë·ªçc d·ªØ li·ªáu c∆° h·ªôi ƒë·∫ßu t∆∞ t·ª´ ${investmentOpportunitiesPath}:`, error);
    return [];
  }
}

function updateInvestmentOpportunities(newOpportunities) {
  try {
    fs.writeFileSync(investmentOpportunitiesPath, JSON.stringify(newOpportunities, null, 2), 'utf8');
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu c∆° h·ªôi ƒë·∫ßu t∆∞:", error);
  }
}

function readUserInvestments() {
  try {
    const rawData = fs.readFileSync(userInvestmentsPath);
    return JSON.parse(rawData);
  } catch (error) {
    console.error(`L·ªói khi ƒë·ªçc d·ªØ li·ªáu ƒë·∫ßu t∆∞ ng∆∞·ªùi d√πng t·ª´ ${userInvestmentsPath}:`, error);
    return {};
  }
}

function updateUserInvestments(data) {
  try {
    fs.writeFileSync(userInvestmentsPath, JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë·∫ßu t∆∞ ng∆∞·ªùi d√πng:", error);
  }
}

function findOpportunityByAbbreviation(abbreviation) {
  const investmentOpportunities = readInvestmentOpportunities();
  return investmentOpportunities.find(op => op.name.toLowerCase() === abbreviation.toLowerCase());
}

function findOpportunityByFullName(fullName) {
  const investmentOpportunities = readInvestmentOpportunities();
  return investmentOpportunities.find(op => op.fullName.toLowerCase() === fullName.toLowerCase());
}

function updateStockPrices() {
  const investmentOpportunities = readInvestmentOpportunities();
  investmentOpportunities.forEach(opportunity => {
    const changePercent = (Math.random() * 0.2 - 0.1); 
    opportunity.currentPrice *= (1 + changePercent);
    opportunity.currentPrice = parseFloat(opportunity.currentPrice.toFixed(2)); 
  });
  updateInvestmentOpportunities(investmentOpportunities);
}

module.exports.config = {
  name: "trader",
  version: "1.8.0",
  hasPermission: 0,
  credits: "Ho√†ng Ng·ªçc T·ª´",
  description: "ƒê·∫ßu t∆∞ c·ªï phi·∫øu ki·∫øm xu",
  commandCategory: "game",
  usePrefix: true,
  usages: `
    .trader [M√£ c·ªï phi·∫øu] [s·ªë ti·ªÅn] | .trader stats [M√£ c·ªï phi·∫øu]
    - ƒê·∫ßu t∆∞ v√†o c·ªï phi·∫øu theo M√£ c·ªï phi·∫øu v√† s·ªë ti·ªÅn. V√≠ d·ª•: .trader CPCN 1000

    H∆∞·ªõng d·∫´n:
    - M√£ c·ªï phi·∫øu ph·∫£i c√≥ trong danh s√°ch c∆° h·ªôi ƒë·∫ßu t∆∞.
    - S·ªë ti·ªÅn ph·∫£i l√† s·ªë d∆∞∆°ng v√† b·∫°n ph·∫£i c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫ßu t∆∞.
    - N·∫øu b·∫°n ƒë·∫ßu t∆∞ v√†o c∆° h·ªôi c√≥ r·ªßi ro d∆∞·ªõi 50%, b·∫°n ch·ªâ c√≥ th·ªÉ ƒë·∫ßu t∆∞ t·ªëi ƒëa 3 l·∫ßn m·ªói gi·ªù.
    - B·∫°n c·∫ßn ƒë·ª£i √≠t nh·∫•t 2 ph√∫t gi·ªØa c√°c l·∫ßn ƒë·∫ßu t∆∞.
    - M·ªói l·∫ßn ƒë·∫ßu t∆∞ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100,000 xu.

    .trader stats [M√£ c·ªï phi·∫øu]
    - Hi·ªÉn th·ªã th·ªëng k√™ ƒë·∫ßu t∆∞ c·ªßa c·ªï phi·∫øu, bao g·ªìm gi√° m·ªü c·ª≠a, gi√° cao nh·∫•t, gi√° th·∫•p nh·∫•t, gi√° hi·ªán t·∫°i v√† gi√° ƒë√≥ng c·ª≠a tr∆∞·ªõc ƒë√≥.
  `,
  cooldowns: 0
};
module.exports.run = async ({ event, api, Currencies }) => {
  const { senderID, threadID } = event;
  const args = event.body.trim().split(' ');

  updateStockPrices();

  if (args.length === 1 && args[0].toLowerCase() === '.trader') {
   
    const investmentOpportunities = readInvestmentOpportunities();
    const list = investmentOpportunities.map(op => 
      `- ${op.name}: ${op.fullName}\nGi√° m·ªü c·ª≠a: ${op.openPrice} xu\nGi√° th·∫•p nh·∫•t: ${op.lowPrice} xu\nGi√° hi·ªán t·∫°i: ${op.currentPrice} xu\nR·ªßi ro ${op.risk * 100}%\nL·ª£i nhu·∫≠n ${op.return}x`
    ).join('\n\n');

    const usageInstructions = `üìã Danh s√°ch c∆° h·ªôi ƒë·∫ßu t∆∞:\n\n${list}\n\n` +
      "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n" +
      ".trader [M√£ c·ªï phi·∫øu] [s·ªë ti·ªÅn]\n" +
      "V√≠ d·ª•: .trader CPCN 1000\n" +
      "M√£ c·ªï phi·∫øu ph·∫£i c√≥ trong danh s√°ch tr√™n v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë d∆∞∆°ng.";

    return api.sendMessage(usageInstructions, threadID);
  }

  if (args.length === 3 && args[1].toLowerCase() === 'stats') {
    
    const abbreviation = args[2].toUpperCase();
    const opportunity = findOpportunityByAbbreviation(abbreviation);

    if (!opportunity) {
      return api.sendMessage(`C·ªï phi·∫øu v·ªõi M√£ c·ªï phi·∫øu "${abbreviation}" kh√¥ng t·ªìn t·∫°i.`, threadID);
    }

    const statsMessage = `üìä Th·ªëng k√™ c·ªï phi·∫øu "${opportunity.fullName}":\n` +
      `- Gi√° m·ªü c·ª≠a: ${opportunity.openPrice} xu\n` +
      `- Gi√° cao nh·∫•t: ${opportunity.highPrice} xu\n` +
      `- Gi√° th·∫•p nh·∫•t: ${opportunity.lowPrice} xu\n` +
      `- Gi√° hi·ªán t·∫°i: ${opportunity.currentPrice} xu\n` +
      `- Gi√° ƒë√≥ng c·ª≠a tr∆∞·ªõc ƒë√≥: ${opportunity.previousClose} xu`;

    return api.sendMessage(statsMessage, threadID);
  }

  if (args.length < 3) {
    return api.sendMessage("Vui l√≤ng s·ª≠ d·ª•ng ƒë√∫ng c√∫ ph√°p: .trader [M√£ c·ªï phi·∫øu] [s·ªë ti·ªÅn]", threadID);
  }

  const investmentTypeInput = args[1].toUpperCase();
  let amount = parseInt(args[2]);

  if (isNaN(amount) || amount <= 0) {
    return api.sendMessage("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn d∆∞∆°ng.", threadID);
  }

  if (amount > MAX_INVESTMENT_PER_TRANSACTION) {
    return api.sendMessage(`M·ªói l·∫ßn ƒë·∫ßu t∆∞ ch·ªâ ƒë∆∞·ª£c ph√©p t·ªëi ƒëa ${MAX_INVESTMENT_PER_TRANSACTION} xu. Vui l√≤ng ƒëi·ªÅu ch·ªânh s·ªë ti·ªÅn ƒë·∫ßu t∆∞ c·ªßa b·∫°n.`, threadID);
  }

  const data = await Currencies.getData(senderID);
  const currentMoney = data.money || 0;

  if (currentMoney < amount) {
    return api.sendMessage(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫ßu t∆∞.\n` +
      `- S·ªë ti·ªÅn hi·ªán t·∫°i: ${currentMoney} xu\n` +
      `- S·ªë ti·ªÅn c·∫ßn ƒë·ªÉ ƒë·∫ßu t∆∞: ${amount} xu`, threadID);
  }

  const userInvestments = readUserInvestments();
  const userTotalInvestment = userInvestments[senderID]?.totalInvestment || 0;

  const opportunity = findOpportunityByAbbreviation(investmentTypeInput);

  if (!opportunity) {
    const investmentOpportunities = readInvestmentOpportunities();
    const suggestedTypes = investmentOpportunities
      .map(op => op.name)
      .filter(name => name.toLowerCase().includes(investmentTypeInput.toLowerCase()))
      .join(', ');

    return api.sendMessage(`M√£ c·ªï phi·∫øu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn M√£ c·ªï phi·∫øu h·ª£p l·ªá t·ª´ danh s√°ch:\n${suggestedTypes}`, threadID);
  }

  const currentTime = moment();
  const lastInvestmentTime = userInvestments[senderID]?.lastInvestmentTime || moment().subtract(1, 'minutes');

  if (currentTime.diff(moment(lastInvestmentTime), 'minutes') < 1) {
    return api.sendMessage("B·∫°n c·∫ßn ƒë·ª£i √≠t nh·∫•t 1 ph√∫t ƒë·ªÉ ƒë·∫ßu t∆∞ ti·∫øp theo.", threadID);
  }

  const investmentCount = userInvestments[senderID]?.count || 0;
  if (opportunity.risk < 0.5 && investmentCount >= 3) {
    return api.sendMessage("B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n ƒë·∫ßu t∆∞ cho c∆° h·ªôi n√†y trong 1 gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
  }

  userInvestments[senderID] = {
    lastInvestmentTime: currentTime,
    count: investmentCount + 1,
    totalInvestment: userTotalInvestment + amount
  };
  updateUserInvestments(userInvestments);

  const transactionFee = amount * 0.01;
  const finalInvestmentAmount = amount - transactionFee;
  const investmentOutcome = Math.random() < opportunity.risk ? 'thua l·ªó' : 'l·ª£i nhu·∫≠n';
  const result = investmentOutcome === 'l·ª£i nhu·∫≠n' ? finalInvestmentAmount * opportunity.return : 0;

  await Currencies.decreaseMoney(senderID, amount); 

  await Currencies.increaseMoney(senderID, result); 

  await recordUserInvestment(senderID, opportunity.name, amount, investmentOutcome, opportunity.return);

  return api.sendMessage(`üìà ƒê·∫ßu t∆∞ v√†o "${opportunity.fullName}" ${investmentOutcome.toUpperCase()}!\n` +
    `- L·ª£i nhu·∫≠n: ${opportunity.return}x\n` +
    `- B·∫°n ${investmentOutcome === 'l·ª£i nhu·∫≠n' ? 'ƒë√£ ki·∫øm ƒë∆∞·ª£c' : 'ƒë√£ m·∫•t'} ${result} xu.\n` +
    `- Ti·ªÅn ƒë·∫ßu t∆∞: ${amount} xu (bao g·ªìm ph√≠ giao d·ªãch ${transactionFee} xu)\n` +
    `- Ti·ªÅn nh·∫≠n ƒë∆∞·ª£c: ${result} xu\n`, threadID);
};

async function recordUserInvestment(userID, investmentType, amount, outcome, returnRate) {
  console.log(`Ghi d·ªØ li·ªáu ƒë·∫ßu t∆∞ cho ng∆∞·ªùi d√πng ${userID}: Lo·∫°i ƒë·∫ßu t∆∞: ${investmentType}, S·ªë ti·ªÅn: ${amount}, K·∫øt qu·∫£: ${outcome}, L·ª£i nhu·∫≠n: ${returnRate}`);
}

function calculateTotalProfit(investments) {
  return investments.reduce((total, inv) => total + (inv.outcome === 'l·ª£i nhu·∫≠n' ? (inv.amount - inv.amount * 0.01) * inv.return : 0), 0);
}

function analyzeRisk(investments) {
  if (investments.length === 0) return 0;
  return investments.reduce((totalRisk, inv) => totalRisk + inv.risk, 0) / investments.length;
}

function analyzeRisk(investments) {
  if (investments.length === 0) return 0;
  return investments.reduce((totalRisk, inv) => totalRisk + inv.risk, 0) / investments.length;
}
