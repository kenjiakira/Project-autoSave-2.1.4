const fs = require('fs');
const path = require('path');

const giftDataPath = path.join(__dirname, 'json', 'giftcodes.json');
const validGiftCodesPath = path.join(__dirname, 'json', 'validGiftCodes.json');

function readOrCreateGiftData() {
  if (!fs.existsSync(giftDataPath)) {
    fs.writeFileSync(giftDataPath, JSON.stringify({}), 'utf8');
    return {}; 
  }
  let rawData;
  try {
    rawData = fs.readFileSync(giftDataPath, 'utf8');
    if (rawData.trim() === '') {
      return {};
    }
    return JSON.parse(rawData);
  } catch (error) {
    console.error('L·ªói khi ph√¢n t√≠ch t·ªáp JSON:', error);
    return {};
  }
}

function readValidGiftCodes() {
  if (!fs.existsSync(validGiftCodesPath)) {
    fs.writeFileSync(validGiftCodesPath, JSON.stringify({}), 'utf8');
    return {}; 
  }
  let rawData;
  try {
    rawData = fs.readFileSync(validGiftCodesPath, 'utf8');
    if (rawData.trim() === '') {
      return {};
    }
    return JSON.parse(rawData);
  } catch (error) {
    console.error('L·ªói khi ph√¢n t√≠ch t·ªáp JSON:', error);
    return {};
  }
}

function saveGiftData(data) {
  try {
    fs.writeFileSync(giftDataPath, JSON.stringify(data), 'utf8');
  } catch (error) {
    console.error('L·ªói khi l∆∞u t·ªáp JSON:', error);
  }
}

module.exports.config = {
  name: "gift",
  version: "1.1.0",
  hasPermission: 0,
  credits: "Ho√†ng Ng·ªçc T·ª´",
  description: "Nh·∫≠n xu t·ª´ Code",
  commandCategory: "Gi·∫£i tr√≠",
  usePrefix: true,
  usages: "giftcode [m√£ gift code]",
  cooldowns: 5
};

module.exports.run = async function({ api, event, Currencies, args }) {
  const { threadID, messageID, senderID } = event;

  if (args.length === 0) {
    return api.sendMessage("Vui l√≤ng nh·∫≠p m√£ gift code.", threadID, messageID);
  }

  const giftCode = args.join(" ").trim(); 
  const giftData = readOrCreateGiftData();
  const validGiftCodes = readValidGiftCodes();

  if (giftData[senderID]) {
    return api.sendMessage("‚ùå B·∫°n ƒë√£ nh·∫≠n gift code tr∆∞·ªõc ƒë√≥. B·∫°n kh√¥ng th·ªÉ nh·∫≠n l·∫°i.", threadID, messageID);
  }

  if (!validGiftCodes[giftCode]) {
    return api.sendMessage("‚ùå M√£ gift code kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: .gift VCL\ncode s·∫Ω ƒë∆∞·ª£c c√¥ng b·ªë khi c√≥ s·ª± ki·ªán trong t∆∞∆°ng lai", threadID, messageID);
  }

  const amount = validGiftCodes[giftCode];

  giftData[senderID] = true;
  saveGiftData(giftData);

  await Currencies.increaseMoney(senderID, amount);

  api.sendMessage(`üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${amount} xu t·ª´ gift code ${giftCode}.`, threadID, messageID);
};
