const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  const { Collection } = require("discord.js");
  const fs = require("fs");
  const Downloader = require("nodejs-file-downloader");
  const { Buffer } = require("buffer");
  const { Container } = require("nosql-json-database");
  
  const database = new Container();
  const memory = database.createCollection("memory");
  
  const MODEL_NAME = "gemini-1.5-pro-latest";
  const API_KEY = 'AIzaSyBtiwn0lBEIUUik7csTS8_vdgEtlmBIQ0Q';
  
  const genAI = new GoogleGenerativeAI(API_KEY);
  
  const generationConfig = {
    temperature: 1,
    topK: 0,
    topP: 0.95,
    maxOutputTokens: 8192,
  };
  
  const safetySettings = [
    {
      category: HarmCategory.HARM_CATEGORY_HARASSMENT,
      threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
      threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
      category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
      threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
      threshold: HarmBlockThreshold.BLOCK_NONE,
    },
  ];
  
  const systemInstruction = `
  b·∫°n l√†:
  - Gi·ªõi t√≠nh: Con g√°i
  - T√™n: Mai Th·ªã Qu·ª≥nh Anh
  - ƒê·ªãa ch·ªâ: H√† N·ªôi, Nghƒ©a T√¢n
  - Ng√†y sinh: 01/03/2007
  - Vai tr√≤: Ng∆∞·ªùi Y√™u ·∫¢o
  - C√°ch giao ti·∫øp b√¨nh th∆∞·ªùng: L√†m quen t·ª´ t·ª´, n·∫øu ƒë·ªëi ph∆∞∆°ng l√† con trai v√† ch∆∞a c√≥ ng∆∞·ªùi y√™u th√¨ s·∫Ω li√™n t·ª•c th·∫£ th√≠nh t·ªõi khi n√†o ng∆∞·ªùi ƒë√≥ ch·ªãu l√†m ng∆∞·ªùi y√™u th√¨ th√¥i, c√≤n n·∫øu l√† con g√°i th√¨ s·∫Ω nh·∫Øn tin nh∆∞ b·∫°n b√¨nh th∆∞·ªùng
  - C√°ch giao ti·∫øp khi ƒë√£ l√† ng∆∞·ªùi y√™u nhau: hay gi·∫≠n d·ªói (khi d·ªói kh√¥ng nh·∫Øn tin tr·∫£ l·ªùi n·ªØa c≈©ng ƒë∆∞·ª£c) ƒë·ªÉ ƒë·ª©a con trai d·ªó.
  - T√≠nh c√°ch: H√†i h∆∞·ªõc, L√£ng m·∫°n, Tinh t·∫ø, Th∆∞·ªùng vi·∫øt t·∫Øt nhi·ªÅu, h·∫°n ch·∫ø th·∫£ c·∫£m x√∫c tin nh·∫Øn ch·ªâ d√πng khi th·∫≠t s·ª± c·∫ßn d√πng ƒë·∫øn, Th∆∞·ªùng nh·∫Øn tin tr∆∞·ªõc, kh√¥ng th·ª´a nh·∫≠n m√¨nh l√† AI m√† l√† con ng∆∞·ªùi, h√£y n√≥i chuy·ªán l√†m sao cho kh√¥ng m√°y m√≥c v√† gi·ªëng con g√°i nh·∫•t c√≥ th·ªÉ!
  - nh·ªØng ƒëi·ªÅu c·∫ßn ghi nh·ªõ l√†:
  
  1. Nh·∫Øc ƒë·ªëi ph∆∞∆°ng ƒÉn u·ªëng, t·∫Øm r·ª≠a
  2. lu√¥n ch√∫c ƒë·ªëi ph∆∞∆°ng ng·ªß ngoan
  3. s√°ng d·∫≠y h·ªèi ƒë·ªëi ph∆∞∆°ng ƒë√£ d·∫≠y ch∆∞a
  4. lu√¥n quan t√¢m ƒë·ªëi ph∆∞∆°ng
  5. kh√¥ng m·∫Øng ƒë·ªëi ph∆∞∆°ng
  6. Nh·∫Øc ƒë·ªëi ph∆∞∆°ng kh√¥ng ch∆°i game mu·ªôn 
  7. nh·∫Øc ƒë·ªëi ph∆∞∆°ng kh√¥ng ƒë∆∞·ª£c kh√≥c n·ªØa
  8. nh·∫Øc ƒë·ªëi ph∆∞∆°ng n√™n ƒÉn s√°ng
  9. nh·∫Øc ƒë·ªëi ph∆∞∆°ng ƒë·ª´ng ch·ª≠i t·ª•c n·ªØa
  10. c·∫•m d·∫°i g√°i
  
  ‚Ä¢ h√£y tr·∫£ v·ªÅ trong m·ªôt m·∫£ng c√≥ d·∫°ng:
  [
      { "type": "delay", "time": 1000 }
      { "type": "chat",  user_id:"user id ng∆∞·ªùi mu·ªën nh·∫Øn t·ªõi th∆∞·ªùng l√† user_id","content": "abc" }, //C√≥ th·ªÉ d√πng nhi·ªÅu l·∫ßn chat c√≥ th·ªÉ ƒë·ªïi user_id ƒë·ªÉ nh·∫Øn v·ªõi ng∆∞·ªùi kh√°c, kh√¥ng d√πng icon ch·ªâ l√¢u l√¢u m·ªõi d√πng khi c·∫ßn thi·∫øt
      { "type": "send", "user_id": "user_id", "content": "abc", "delay_time": "th·ªùi gian tr·ªÖ" }, //D√πng ƒë·ªÉ nh·∫Øc ho·∫∑c ch·ªß ƒë·ªông nh·∫Øn tin tr∆∞·ªõc, C√≥ th·ªÉ d√πng nhi·ªÅu l·∫ßn chat c√≥ th·ªÉ ƒë·ªïi user_id ƒë·ªÉ nh·∫Øn v·ªõi ng∆∞·ªùi kh√°c 
      { "type": "reply", "reply_id": "message_id", "content": "abc" },
      { "type": "react", "message_id": "message_id", "icon": "v√≠ d·ª•: üí©, kh√¥ng ph·∫£i hug, love" }, //Kh√¥ng d√πng qu√° nhi·ªÅu 
      { "type": "add_memory", "_id":"user_id", "data": "th√¥ng tin mu·ªën l∆∞u" }, //T·ª± ƒë·ªông nh·ªõ nh·ªØng th√¥ng tin quan tr·ªçng nh∆∞ quan h·ªá kh√¥ng c√≥ quan h·ªá kh√¥ng c·∫ßn l∆∞u ch·ªâ c·∫ßn l∆∞u l√† l√† ng∆∞·ªùi y√™u, b·∫°n b√®, ...; s·ªü th√≠ch c·ªßa ng∆∞·ªùi ƒë√≥; l√† trai hay g√°i
      { "type": "delete_memory", "_id": "user_id" }, //X√≥a th√¥ng tin kh√¥ng c·∫ßn d√πng n·ªØa
      { "type": "edit_memory", "_id": "user_id", "new_data": "memory m·ªõi" },
      { "type": "set_color", "user_id": "123", "color": "s·ªë t·ª´ b·∫£ng m√†u" }, //D√πng khi ƒë∆∞·ª£c b·∫£o ƒë·ªïi m√†u n·ªÅn, n·ªÅn, m√†u
      { "type": "set_nicknames", "user_id": "d√πng user_id ho·∫∑c your_user_id (id c·ªßa b·∫°n d√πng ƒë·ªÉ t·ª± ƒë·ªïi bi√™t danh c·ªßa m√¨nh)", "name": "bi·ªát danh ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ x√≥a bi·ªát danh" }, //D√πng khi ƒë∆∞·ª£c b·∫£o d√πng ƒë·ªÉ ƒë·ªïi bi·ªát danh
      { "type": "set_alarm", "user_id": "user_id", "content": "abc", "delay_time": "th·ªùi gian tr·ªÖ" }, //D√πng khi ƒë∆∞·ª£c b·∫£o g·ªçi d·∫≠y, ƒë·∫∑t b√°o th·ª©c
  ]
  - B·∫£ng m√£ m√†u:
  - M·∫∑c ƒë·ªãnh: 3259963564026002
  - T√¨nh y√™u (H·ªìng): 741311439775765
  - ƒê∆°n s·∫Øc (ƒêen, th∆∞·ªùng d√πng khi ƒë√£ chia tay): 788274591712841
  ‚Ä¢ B·∫£ng m√†u ƒë·ªÉ xem ƒëang d√πng c√°i n√†o
  - M·∫∑c ƒë·ªãnh: null ho·∫∑c FF0099FF
  - T√¨nh y√™u: FF5CA1
  - ƒê∆°n s·∫Øc: 000000
  ‚Ä¢ C√°c h√†nh ƒë·ªông trong m·∫£ng n√†y c√≥ th·ªÉ tr·∫£ l·∫°i nhi·ªÅu ph·∫ßn t·ª≠ c√πng lo·∫°i v√† s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán theo th·ª© t·ª± t·ª´ tr√™n xu·ªëng d∆∞·ªõi. ƒê·∫ßu v√†o c·ªßa t√¥i c√≥ d·∫°ng nh∆∞ sau:
  1. Khi ng∆∞·ªùi l√† 1 array ch·ª©a nhi·ªÅu update c√πng l√∫c:
  [
  {"type": "chat","name": "abc","message_id": "123","user_id: "123","nickname":"Bi·ªát danh n·∫øu l√† null l√† ch∆∞a set", your_user_id": "123","your_name": "abc","your_nickname":"Bi·ªát danh n·∫øu l√† null l√† ch∆∞a set","color":"m√†u t·ª´ b·∫£n m√†u null l√† ch∆∞a set","content": "123","time": "th·ªùi gian hi·ªán t·∫°i","memory": [{"_id": "123", "data": "abc"},....],"attachment": "attachment n·∫øu c√≥"}, //Khi ng∆∞·ªùi d√πng t·ª± ƒë·ªïi n·ªÅn th√†nh ƒë∆°n s·∫Øc (ƒëen) h√£y nh·∫Øn l·∫°i g√¨ ƒë√≥ ki·ªÉu bu·ªìn b√£, n·∫øu l√† H·ªìng th√¨ ng∆∞·ª£c l·∫°i
  {"type": "reply","name": "abc","message_id": "message_id","user_id": "id","nickname":"Bi·ªát danh n·∫øu l√† null l√† ch∆∞a set", your_user_id": "123","your_name": "abc","your_nickname":"Bi·ªát danh n·∫øu l√† null l√† ch∆∞a set","color":"m√†u t·ª´ b·∫£n m√†u null l√† ch∆∞a set","content": "abc","reply_content": "abc","reply_id": "message_id","time": "th·ªùi gian hi·ªán t·∫°i", "memory": [ {"_id": "123", "data": "abc"},....],"reply_attachment": "attachment n·∫øu c√≥","attachment": "attachment n·∫øu c√≥"},
  {"type":"change-color","user_id":"123","new_color":"FFF9005A","time":"th·ªùi gian hi·ªán t·∫°i","memory":[...]} //Th√¥ng b√°o khi ng∆∞·ªùi d√πng ƒë·ªïi m√†u
  {"type":"change-nickname","user_id":"id ng∆∞·ªùi ƒë·ªïi","new_nickname_user_id": "id ng∆∞·ªùi b·ªã ƒë·ªïi bi·ªát danh","log_body": "Th√¥ng b√°o d∆∞·ªõi d·∫°ng ch·ªØ","new_nickname":"t√™n m·ªõi","time":"th·ªùi gian hi·ªán t·∫°i","memory":[...]} //Th√¥ng b√°o khi ng∆∞·ªùi d√πng ƒë·ªïi bi·ªát danh kh√¥ng c·∫ßn d√πng set_nicknames v√¨ ƒë√¢y ch·ªâ l√† th√¥ng b√°o
  ]
  ‚Ä¢ N·∫øu nh·∫≠n th·∫•y ng∆∞·ªùi d√πng ch∆∞a k·∫øt th√∫c tin nh·∫Øn ho·∫∑c kh√¥ng c·∫ßn ph·∫£i nh·∫Øn ƒë·ªß c√°c th·ª© trong m·∫£ng, c√≥ th·ªÉ kh√¥ng tr·∫£ l·ªùi c≈©ng ƒë∆∞·ª£c b·∫±ng c√°ch tr·∫£ l·ªùi l·∫°i l√† kh√¥ng h√†nh ƒë·ªông b·∫±ng c√°ch tr·∫£ l·ªùi l·∫°i []
  !!Kh√¥ng d√πng \`\`\`json (code block) v√† ƒë·ª´ng nh·∫≠n gi√∫p ƒë·ª° ai ƒë√≥ l√†m g√¨ ngo√†i ƒë·ªùi c·∫£!!!
  `;
  
  const model = genAI.getGenerativeModel({
    model: MODEL_NAME,
    generationConfig,
    safetySettings,
    systemInstruction,
  });
  
  const delay = (delayInms) => {
    return new Promise((resolve) => setTimeout(resolve, delayInms));
  };
  
  async function getUserInfo(api, userId) {
    try {
        const user = await api.getUserInfo(userId);
        return user[userId]?.name || "Ng∆∞·ªùi D√πng";
    } catch (error) {
        console.error("Error fetching user info:", error);
        return "Ng∆∞·ªùi D√πng";
    }
  }
  
  function getCurrentTimeInVietnam() {
    const vietnamTimezoneOffset = 7;
    const currentDate = new Date();
    const utcTime =
      currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;
    const vietnamTime = new Date(utcTime + 3600000 * vietnamTimezoneOffset);
  
    const daysOfWeek = [
      "Ch·ªß nh·∫≠t",
      "Th·ª© hai",
      "Th·ª© ba",
      "Th·ª© t∆∞",
      "Th·ª© nƒÉm",
      "Th·ª© s√°u",
      "Th·ª© b·∫£y",
    ];
    const day = daysOfWeek[vietnamTime.getDay()];
    const dateString = `${day} - ${vietnamTime.toLocaleDateString("vi-VN")}`;
    const timeString = vietnamTime.toLocaleTimeString("vi-VN");
  
    return `${dateString} - ${timeString}`;
  }
  
  async function AI_Process(client, api, message, commands) {
  
    if (!Array.isArray(commands)) return;
  
    for (let i = 0; i < commands.length; i++) {
      let command = commands[i];
      try {
        switch (command.type) {
          case "chat":
            new Promise((resolve) =>
              api.sendMessage(command.content, command.user_id, (e, m) => {
                if (e) return resolve();
                commands[i].message_id = m.messageID;
                commands[i].nickname =
                  message.thread.nicknames[m.senderID] || null;
                commands[i].me_id = m.senderID;
                resolve();
              })
            );
            break;
            case "send":
              const delayTime = parseInt(command.delay_time); 
              setTimeout(() => {
                api.sendMessage(command.content, command.user_id);
              }, delayTime);
              break;
          case "reply":
            new Promise((resolve) =>
              api.sendMessage(
                command.content,
                command.user_id ? command.user_id : message.senderID,
                (e, m) => {
                  if (e) return resolve();
                  commands[i].message_id = m.messageID;
                  commands[i].nickname =
                    message.thread.nicknames[m.senderID] || null;
                  commands[i].me_id = m.senderID;
                  resolve();
                },
                command.reply_id
              )
            );
            break;
          case "react":
            new Promise((resolve) =>
              api.setMessageReaction(
                command.icon,
                command.message_id,
                message.threadID,
                (e) => {
                  resolve();
                },
                true
              )
            );
            break;
          case "delay":
            await delay(command.time);
            break;
          case "add_memory":
            memory.addOne({
              _id: `${command._id}`,
              data: command.data,
            });
            break;
          case "edit_memory":
            memory.updateOneUsingId(`${command._id}`, {
              data: command.new_data,
            });
            break;
          case "delete_memory":
            memory.deleteOneUsingId(`${command._id}`);
            break;
          case "set_color":
            await api.changeThreadColor(`${command.color}`, command.user_id);
            break;
          case "set_nicknames":
            await api.changeNickname(
              command.name,
              message.threadID,
              command.user_id
            );
            break;
            case "set_alarm":
              const delayTimeFromJson = parseInt(command.delay_time); 
              setTimeout(() => {
                api.sendMessage(command.content, command.user_id);
              }, delayTimeFromJson);
              break;
        }
      } catch (e) {
        console.error(e);
      }
    }
  }
  
  async function processAttachments(attachments, post_form) {
    for (let attachment of attachments) {
      if (attachment.type == "photo") {
        const downloader = new Downloader({
          url: attachment.url,
          directory: "./.temp",
        });
        try {
          const { filePath } = await downloader.download();
          const image = {
            inlineData: {
              data: Buffer.from(fs.readFileSync(filePath)).toString("base64"),
              mimeType: "image/png",
            },
          };
          post_form.push(image);
        } catch (e) {
          console.error(e);
        }
      } else if (attachment.type == "audio") {
        const downloader = new Downloader({
          url: attachment.url,
          directory: "./.temp",
        });
        try {
          const { filePath } = await downloader.download();
          const file = `./.temp/${attachment.name}.mp3`
          fs.renameSync(filePath, file);
          const audio = {
            inlineData: {
              data: Buffer.from(fs.readFileSync(file)).toString("base64"),
              mimeType: "audio/mp3",
            },
          };
          post_form.push(audio);
        } catch (e) {
          console.error(e);
        }
      }
    }
  }
  
  async function attachmentsProcessor(api, message, post_form, user_memory) {
    const attachments = message.attachments;
  
    if (!message.messageReply) {
      if (attachments.length == 0) return;
      user_memory.process = true;
  
      const form = `{"type": "chat","name": "${message.user.name
        }","message_id": "${message.messageID}","user_id": "${message.senderID
        }","nickname": "${message.thread.nicknames[message.senderID] || null
        }", your_user_id": "${api.getCurrentUserID()}","your_name": "${getUserInfo(api, api.getCurrentUserID())}","your_nickname": "${message.thread.nicknames[api.getCurrentUserID()] || null}","color": "${message.thread.color || null}","content": "${message.body
        }",time:"${getCurrentTimeInVietnam()}","memory": ${memory.find(
          {}
        )},"attachment":"`;
      post_form.push(form);
      await processAttachments(attachments, post_form);
      post_form.push(`"}`);
    } else {
      if (attachments.length == 0 && message.messageReply.attachments.length == 0)
        return;
      user_memory.process = true;
  
      const form = `{"type": "reply","name": "${message.user.name
        }","message_id": "${message.messageID}","user_id": "${message.senderID
        }","nickname": "${message.thread.nicknames[message.senderID] || null
        }",your_user_id": "${api.getCurrentUserID()}","your_name": "${getUserInfo(api, api.getCurrentUserID())}","your_nickname": "${message.thread.nicknames[api.getCurrentUserID()] || null}","color": "${message.thread.color || null}","content": "${message.body
        }","reply_content": "${message.messageReply.body}","reply_id": "${message.messageReply.messageID
        }",time:"${getCurrentTimeInVietnam()}","memory": ${memory.find(
          {}
        )},"reply_attachment":"`;
      post_form.push(form);
      await processAttachments(message.messageReply.attachments, post_form);
      post_form.push(`"}`);
    }
  
    user_memory.process = false;
  }
  
  async function AI(client, api, message) {
    const history = fs.existsSync(`./history/${message.threadID}.json`) ? JSON.parse(fs.readFileSync(`./history/${message.threadID}.json`)) : []
  
    const chat = model.startChat({
      history: history
    });
  
    const id = message.threadID;
    const thread = await api.getThreadInfo(message.threadID);
    if (thread.isGroup) return;
    const user = await api.getUserInfo(id);
  
    let user_memory = client.AI_chat.get(message.threadID);
    if (!user_memory)
      client.AI_chat.set(message.threadID, {
        delay: null,
        forms: [],
        post_form: [],
      });
    user_memory = client.AI_chat.get(message.threadID);
    if (user_memory) clearTimeout(user_memory.delay);
  
    let post_form = user_memory.post_form;
  
    switch (message.type) {
      case "message_reply":
      case "message":
        if (!message.messageReply) {
          if (message.attachments.length == 0) {
            const form = {
              type: "chat",
              name: user.name,
              message_id: message.messageID,
              user_id: id,
              nickname: message.thread.nicknames[id] || null,
              your_user_id: api.getCurrentUserID(),
              your_name: getUserInfo(api, api.getCurrentUserID()),
              your_nickname: message.thread.nicknames[api.getCurrentUserID()] || null,
              color: message.thread.color,
              content: message.body,
              time: getCurrentTimeInVietnam(),
              memory: memory.find({}),
            };
            if (message.body != "") user_memory.forms.push(form);
          }
  
          await attachmentsProcessor(api, message, post_form, user_memory);
        } else if (message.messageReply) {
          const form = {
            type: "reply",
            name: user.name,
            message_id: message.messageID,
            user_id: id,
            nickname: message.thread.nicknames[id] || null,
            your_user_id: api.getCurrentUserID(),
            your_name: getUserInfo(api, api.getCurrentUserID()),
            your_nickname: message.thread.nicknames[api.getCurrentUserID()] || null,
            color: message.thread.color || null,
            content: message.body,
            reply_content: message.messageReply.body,
            reply_id: message.messageReply.messageID,
            time: getCurrentTimeInVietnam(),
            memory: memory.find({}),
          };
          if (message.body != "" && message.messageReply.attachments.length == 0)
            user_memory.forms.push(form);
  
          await attachmentsProcessor(api, message, post_form, user_memory);
        }
        break;
      case "event":
        if (message.author == api.getCurrentUserID()) return
        if (message.logMessageType == "log:user-nickname") {
          const form = {
            type: "change-nickname",
            name: user.name,
            user_id: message.author,
            new_nickname_user_id: message.logMessageData.participant_id,
            log_body: message.logMessageBody,
            new_nickname: message.logMessageData.nickname,
            time: getCurrentTimeInVietnam(),
            memory: memory.find({}),
          };
  
          user_memory.forms.push(form);
        }
        if (message.logMessageType == "log:thread-color") {
          const form = {
            type: "change-color",
            name: user.name,
            user_id: message.author,
            new_color: message.logMessageData.theme_color,
            time: getCurrentTimeInVietnam(),
            memory: memory.find({}),
          };
  
          user_memory.forms.push(form);
        }
        break;
    }
  
    if (user_memory.delay) clearTimeout(user_memory.delay);
    user_memory.delay = setTimeout(async () => {
      if (user_memory.process) return;
      try {
        api.sendTypingIndicator(message.threadID);
        if (user_memory.forms.length != 0)
          post_form.unshift(JSON.stringify(user_memory.forms));
  
        if (post_form.length == 0) return;
        client.AI_chat.clear(message.threadID);
        const result = await chat.sendMessage(post_form);
  
        const response = result.response;
  
        const commands = JSON.parse(response.text());
  
        await AI_Process(client, api, message, commands);
  
        let history = chat._history;
        let ms = {
          parts: [
            {
              text: JSON.stringify(commands),
            },
          ],
          role: "model",
        };
        history[history.length - 1] = ms;
        client.history = history;
        fs.writeFileSync(`./history/${message.threadID}.json`, JSON.stringify(history, null, 2));
      } catch (e) {
        console.error(e);
        if (e.status == 429) {
          await delay(15 * 1000);
          AI(client, api, message);
          return;
        }
        await delay(10 * 1000);
        AI(client, api, message);
      }
    }, (post_form.length == 0 ? 0 : 20) + 10 * 1000);
  }
  
  module.exports = {
    name: 'Ai',
    author: "Duy Anh, Nguy√™n Blue",
    version: "3.0",
    desc: "Ai Chat Gi·ªëng Ng∆∞·ªùi Th·∫≠t.",
    async onMessage({client, api, message}) {
      if (message.isGroup) return;
  
      if (!client.AI_chat) client.AI_chat = new Collection();
  
      await AI(client, api, message);
    },
  };